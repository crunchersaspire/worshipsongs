plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.dicedmelon.gradle.jacoco-android'
apply from: '../sonarqube.gradle'
// Helps to run Groovy(Spock) tests
apply plugin: 'groovyx.android'

def buildNumber = System.getenv("BUILD_NUMBER")
if (buildNumber == null) {
    buildNumber = "1"
}
def versionCodeNumber = Integer.parseInt(buildNumber)
def APP_VERSION = getCurrentVersionName(versionCodeNumber)
ext.set('AppVersion', APP_VERSION)

jacoco {
    toolVersion = "0.8.6"
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "org.worshipsongs"
        minSdkVersion 15
        targetSdkVersion 30
        versionCode versionCodeNumber
        versionName APP_VERSION
        setProperty("archivesBaseName", "worshipsongs-" + defaultConfig.versionName)
    }

    compileOptions {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    compileOptions.encoding = "UTF-8"

    signingConfigs {
        releaseConfig {
            storeFile file('../worshipsongs-key.jks')
            storePassword System.getenv("WORSHIPSONGS_KEYSTOREPWD")
            keyAlias System.getenv("WORSHIPSONGS_KEYALIAS")
            keyPassword System.getenv("WORSHIPSONGS_KEYPASSWORD")

        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }

        release {
            testCoverageEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
            debuggable = false
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '15'

            testLogging {
                events "PASSED", "STARTED", "FAILED", "SKIPPED"
            }

            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }
        }

        unitTests {
            includeAndroidResources = true
        }

        unitTests.returnDefaultValues = true
    }
}

def getCurrentVersionName(versionCodeNumber)
{
    def versionPropertyFile = file('../version.properties')

    if (versionPropertyFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropertyFile))

        def majorVersion = versionProps['MAJOR_VERSION'] ?: "0"
        def minorVersion = versionProps['MINOR_VERSION'] ?: "0"
        def patchVersion = versionProps['PATCH_VERSION'] ?: "0"

        return "${majorVersion}.${minorVersion}.${patchVersion}.${versionCodeNumber}"
    }

    throw new Exception("Unable to read from version file.")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs/YouTubeAndroidPlayerApi-1.2.2.jar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.mediarouter:mediarouter:1.2.5'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.github.woxthebox:draglistview:1.6.6'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'commons-io:commons-io:2.4'
    implementation 'org.apache.commons:commons-lang3:3.3.2'


    androidTestImplementation('androidx.test.ext:junit:1.1.3') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.json:json:20180813'
    testImplementation 'org.codehaus.groovy:groovy-all:2.4.15'
    testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
    testImplementation 'org.robolectric:robolectric:4.8.2'
    testImplementation 'org.robolectric:shadows-support-v4:3.1'
    testImplementation 'androidx.test:core:1.4.0'

    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'
}

repositories {
    mavenCentral()
}