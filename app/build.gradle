plugins {
    id "org.sonarqube" version "1.2"
}
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply from: '../sonarqube.gradle'


def buildNumber = System.getenv("BUILD_NUMBER") ?: "308"
def versionCodeNumber = Integer.parseInt(buildNumber) + 291
def APP_VERSION = getCurrentVersionName(versionCodeNumber)
ext.set('AppVersion', APP_VERSION)

android {

    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "org.worshipsongs"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode versionCodeNumber
        versionName APP_VERSION
    }

    signingConfigs {
        releaseConfig {
            storeFile file('../worshipsongs-key.jks')
            storePassword System.getenv("WORSHIPSONGS_KEYSTOREPWD")
            keyAlias System.getenv("WORSHIPSONGS_KEYALIAS")
            keyPassword System.getenv("WORSHIPSONGS_KEYPASSWORD")
            
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
            testCoverageEnabled false
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(output.outputFile.parent, "worshipsongs-" + defaultConfig.versionName + ".apk")
                }
            }
        }
        debug {
            minifyEnabled false
            testCoverageEnabled true
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    output.outputFile = new File(output.outputFile.parent, "worshipsongs-" + defaultConfig.versionName + ".apk")
                }
            }
        }
    }
    packagingOptions {

        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

}

def getCurrentVersionName(versionCodeNumber)
{
    def gradlePropertyFile = file('../version.properties')
    def majorVersion
    def minorVersion = versionCodeNumber
    def currentVersionName = "2.91"
    if (gradlePropertyFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(gradlePropertyFile))
        majorVersion = versionProps['MAJOR_VERSION'] ?: "3"
        def currentBranch = System.getenv("GIT_BRANCH") ?: "development"
        if (currentBranch.toLowerCase().contains("development")) {
            currentVersionName = majorVersion + "." + minorVersion.toString()
            versionProps['MAJOR_VERSION'] = majorVersion
            versionProps["MINOR_VERSION"] = minorVersion.toString()
            versionProps["VERSION_CODE"] = minorVersion.toString()
            versionProps.store(gradlePropertyFile.newWriter(), null)
        } else {
            currentVersionName = majorVersion + "." + minorVersion.toString()
        }
    }
    return currentVersionName
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //compile files('libs/robotium-solo-2.5.jar')
    compile files('libs/YouTubeAndroidPlayerApi.jar')
    compile 'com.android.support:preference-v14:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'

    compile 'it.neokree:MaterialNavigationDrawer:1.3.3'
    compile 'net.margaritov.preference.colorpicker.ColorPickerPreference:ColorPickerPreference:1.0.0'
    compile 'com.getbase:floatingactionbutton:1.10.1'

    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-lang3:3.3.2'

    androidTestCompile('com.android.support.test:runner:0.3') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.json:json:20140107'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.10'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-4'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.0'
    testCompile 'com.github.hkhc:electricspock:0.5.0.1'
}

//Jacoco configuration
jacoco {
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.4+"
}

def coverageSourceDirs = ['../app/src/main/java']
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*', '**/**Test*']
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}





