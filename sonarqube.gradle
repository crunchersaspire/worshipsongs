// recommend to specify the flavor once and dynamically adapt paths to it
//def flavor = "develop" // flavor we want to have tested. Should be static
//def Flavor = "Develop" // flavor again, but starting with upper case

// noinspection is used to remove some "warnings" from Android Studio
sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-25/android.jar," +
                "build/intermediates/exploded-aar/**/classes.jar"
        property "sonar.host.url", "http://sonarqube.mcruncher.com"
        property "sonar.projectName", "Worshipsongs::ANDROID"
        property "sonar.projectKey", "songsandroid"
        property "sonar.projectVersion", AppVersion

        property "sonar.sourceEncoding","UTF-8"
        property "sonar.sources", "src/main/java,src/main/res"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.java.libraries", libraries

        property "sonar.tests", "src/test/java" // where the tests are located
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
        property "sonar.java.test.libraries", libraries
        property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec" // path to coverage reports
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest/debug" // path to junit reports
        property "sonar.android.lint.report", "build/outputs/lint-results-debug.xml"
    }
}

import org.gradle.internal.os.OperatingSystem;
task sonarComplete(type: Exec) {
    workingDir "./"
    def command = "../gradlew"
    if (OperatingSystem.current().isWindows()) {
        command = command + ".bat"
    }
    commandLine command, "clean", "assembleDebug", "lint", "jacocoTestReport", "sonarqube"
}